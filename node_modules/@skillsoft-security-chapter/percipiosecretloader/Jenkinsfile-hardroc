#!/usr/bin/env groovy
// Build URL:

// Repo: https://github.skillsoft.com/HardRoc/jenkins-shared-lib-ucm2
@Library('ucm2') _

pipeline {
  parameters { 
    booleanParam(name: 'FORCE_BUILD', defaultValue: false, description: 'Force a package bump and publish, even if there are no changes detected.') 
  }
  environment {
    IMAGE_NAME = "percipio-secret-loader" // There's no docker image. This is used for notification details.
    IMAGE_TAG = "${env.BRANCH_NAME}_${env.BUILD_NUMBER}-${ucm2GitRev()}"
    FULL_IMAGE_NAME = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    SLACK_CHANNEL = "hroc-b-percipio-secret-loader"

    CONTAINS_UNPUBLISHED_CHANGES = hrocChangesetIncludesNonCISkip()
  }
  agent { label 'docker' }
  options {
    disableConcurrentBuilds()
  }

  stages {
    stage('Build') {
      when {
         anyOf { branch 'master' }
      }
      steps {
        script {
          hrocPrintAgentInfo()
          currentBuild.displayName = "#${env.BUILD_NUMBER} - ${env.IMAGE_TAG}"

          if ("true" == "${env.CONTAINS_UNPUBLISHED_CHANGES}" || params.FORCE_BUILD) {
            // Login to Git and Docker on the agent
            hrocGitLogin()

            // Wire the current source to the remote branch, and grab any changes that happened while this build was in the queue
            sh 'git remote set-url origin git@github.skillsoft.com:security-chapter/percipioSecretLoader.git'
            sh "git fetch && git checkout -f ${env.BRANCH_NAME} && git pull"

            // Install dependencies
            sh 'npm ci'

            // Update package version
            sh 'npm version patch -m "[ci skip] -- Jenkins package version"'

            // Push package update
            sh 'git push'

            // Prepare publish config as .npmrc from Jenkins secret
            hrocNexusNpmrc()

            // Publish
            sh 'npm publish --registry https://nexus.rocs.io:8081/repository/npm-skillsoft/'
          }
        }
      }
    }
  }
  post {
    fixed {
      script {
        if (env.BRANCH_NAME == 'master') {
          ucm2StatusNotify([
            channel: env.SLACK_CHANNEL,
            image: env.FULL_IMAGE_NAME
          ])
        }
      }
    }
    failure {
      script {
        if (env.BRANCH_NAME == 'master') {
          ucm2StatusNotify([
            channel: env.SLACK_CHANNEL,
            image: env.FULL_IMAGE_NAME
          ])
        }
      }
    }
    unstable {
      script {
        if (env.BRANCH_NAME == 'master') {
          ucm2StatusNotify([
            channel: env.SLACK_CHANNEL,
            image: env.FULL_IMAGE_NAME
          ])
        }
      }
    }
  }
}