#!/usr/bin/env node
// PSL => means Percipio Secret Manager

const fs = require('fs');
const yargs = require('yargs');

const { STSClient } = require("@aws-sdk/client-sts");
const { SecretsManagerClient } = require("@aws-sdk/client-secrets-manager");
const { fromSSO } = require("@aws-sdk/credential-providers");

const { getCurrentUser } = require('./lib/aws.js')
const { renderFile } = require('./lib/renderFile.js')
const { scrubFile } = require('./lib/scrubFile.js')
const { registerCurrentUser } = require('./lib/currentUserSingleton.js')

let awsprofile = 'develop'
let awsregion = 'us-east-1'
let skipcache = false
let fromrole = false
let engine = 'dollarORnextgen'

let specifiedCommand = 'help'

const argv = yargs
  .command('render <file> [--awsprofile awsdev] [--skipcache false] [--fromrole false] [--engine dollarORnextgen]', 'Render a templatefile and load it\'s secret', (yargs) => {
    specifiedCommand = 'render'
    return yargs.positional('file', {
      file: {
        description: 'The template file to be loaded',
        alias: 'f',
        type: 'string'
      }
    }).positional('awsprofile', {
      awsprofile: {
        description: 'The aws profile to use. Default "develop"',
        alias: 'p',
        type: 'string',
        default: 'develop'
      }
    }).positional('awsregion', {
      awsregion: {
        description: 'The aws region to use. Default "us-east-1"',
        alias: 'r',
        type: 'string',
        default: 'us-east-1'
      }
    }).positional('skipcache', {
      skipcache: {
        description: 'whether or not use cache',
        alias: 'c',
        type: 'boolean',
        default: false
      }
    }).positional('fromrole', {
      fromrole: {
        description: 'true to skip sso check and use role privileges for resolve',
        type: 'boolean',
        default: false
      }
    }).positional('engine', {
      fromrole: {
        description: 'either "dollar" (for ${}) or "hash" (for #{}) or "nexgen" (for <+ >) or "dollarORnextgen" for both or "hashORnextgen" for both.',
        alias: 'e',
        type: 'string',
        default: 'dollar'
      }
    })
  })
  .command('scrub <file>', 'Replace all harness secret expressions with MUST_OVERRIDE', (yargs) => {
    specifiedCommand = 'scrub'
  })
  .help()
  .alias('help', 'h')
  .demandCommand()
  .argv;

if (argv.awsprofile) {
  awsprofile = argv.awsprofile;
}
if (argv.awsregion) {
  awsregion = argv.awsregion;
}
if (argv.skipcache) {
  skipcache = argv.skipcache;
}
if (argv.fromrole) {
  fromrole = argv.fromrole
}
if (argv.engine) {
  engine = argv.engine
}

(async function () {
  if ('render' === specifiedCommand) {
    // Check if file exists
    if (!fs.existsSync(argv.file)) {
      console.error("file not found")
      process.exit(-1)
    }

    let awsContext = {region: awsregion}
    if (!fromrole) {
      try {
        credentials = await fromSSO({ profile: awsprofile })();
        awsContext = {
          credentials: credentials,
          region: awsregion
        }
      } catch (e) {
        console.error(e.message)
        process.exit(-1)
      }
    }

    const STSClientInstance = new STSClient(awsContext);
    const currentUser = await getCurrentUser(STSClientInstance);
    if (!!!currentUser) {
      console.error("You are not AWS authenticated, please run aws sso login.")
      process.exit(-1)
    } else {
      await registerCurrentUser(currentUser);
    }

    // Run the templating engine
    const SecretsManager = new SecretsManagerClient(awsContext);
    await renderFile(SecretsManager, argv.file, skipcache, engine);
  } else if ('scrub' === specifiedCommand) {
    await scrubFile(argv.file, engine);
  }
})();
